/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.15
 * Generated at: 2017-05-24 00:23:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.sqlconn;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.beans.*;
import java.lang.reflect.*;

public final class conn_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.lang.reflect");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.beans");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<pre>\n");


    Class.forName("org.postgresql.Driver");
    String url = "jdbc:postgresql://localhost/test", username = "test", password = "";
    try (Connection db = DriverManager.getConnection(url, username, password)) {

        out.println("Connection.getHoldability " + db.getHoldability());
        out.println("Connection.getTransactionIsolation " + db.getTransactionIsolation());
        out.println("Connection.getAutoCommit " + db.getAutoCommit());
        out.println("Connection.getCatalog " + db.getCatalog());
        out.println("Connection.getSchema " + db.getSchema());
        out.println("Connection.getClientInfo " + db.getClientInfo());
        // Postgres does not support getNetworkTimeout.
//    out.println("Connection.getNetworkTimeout " + db.getNetworkTimeout());

        // Postgres returns null for getTypeMap()!
        Map<String, Class<?>> types = db.getTypeMap();
        if (types != null) {
            out.println("Connection.getTypeMap:");
            for (Map.Entry<String, Class<?>> entry : types.entrySet()) {
                out.println("  " + entry.getKey() + " : " + entry.getValue());
            }
        }

        DatabaseMetaData meta = db.getMetaData();
        BeanInfo beanInfo = Introspector.getBeanInfo(DatabaseMetaData.class);
        for (PropertyDescriptor pd : beanInfo.getPropertyDescriptors()) {
            try {
                Method m = pd.getReadMethod();
                Object val = m.invoke(meta, new Object[]{});
                out.println("DatabaseMetaData." + pd.getName() + ": " + val);
            } catch (Exception e) {
                // Some getter throws NotSupportException, and we can ignore.
            }
        }

        ResultSet rs;
        rs = meta.getClientInfoProperties();
        while (rs.next()) {
            out.println("ClientInfoProperties." + rs.getObject(1));
        }
        rs = meta.getSchemas();
        while (rs.next()) {
            out.println("Schemas." + rs.getObject(1));
        }
        rs = meta.getCatalogs();
        while (rs.next()) {
            out.println("Catalogs." + rs.getObject(1));
        }
        rs = meta.getTableTypes();
        while (rs.next()) {
            out.println("TableTypes." + rs.getObject(1));
        }
        rs = meta.getTypeInfo();
        while (rs.next()) {
            out.println("TypeInfo." + rs.getObject(1));
        }
    }

      out.write("\n");
      out.write("</pre>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
